



/**
 * Lyssnar p√• n√§r en ny flik skapas och omdirigerar till Google OCH skriver ut CTRL + T
 */
chrome.tabs.onCreated.addListener((tab) => {
        this.isCtrlTVisible = false;
        this.isCtrlWVisible = false;
        this.flagForWebbsiteForCTRLR = false;
    // Om det √§r en ny tom flik (`chrome://newtab/`), omdirigera till Google
    /**
     * Kontrollerar ifall tab.url √§r tom eller om det √§r en ny flik, om det √§r sant s√• omdirigerar den till google
     * chrome eventet onUpdated som lyssnar p√• n√§r google har laddats klart och och g√∂r sedan en kontroll och skriver ut CTRL + t
     */
    if (!tab.url || tab.url.startsWith("chrome://newtab")) {
        console.warn("üö´ Uppt√§ckte en tom flik, omdirigerar till Google...");
        chrome.tabs.update(tab.id, { url: "https://www.google.com" });

        // Lyssna p√• n√§r Google-sidan har laddats klart
        chrome.tabs.onUpdated.addListener(function listener(tabId, changeInfo, updatedTab) {

            // Kontrollera om URL √§r korrekt
            if (tabId === tab.id && changeInfo.status === "complete" && updatedTab.url && updatedTab.url.includes("https://www.google.com")) {
                this.isCtrlTVisible = true;
                console.log("CTRL + T");
                // Skicka meddelandet f√∂rst n√§r Google har laddats klart
                chrome.tabs.sendMessage(tab.id, {
                    action: "show_message",
                    text: "CTRL + T"
                }, () => {
                    if (chrome.runtime.lastError) {
                        // console.warn("‚ö†Ô∏è Kunde inte skicka meddelande. Content-script kanske inte √§r laddat?");
                    }
                });

                // Ta bort event listenern s√• att vi inte skickar meddelandet flera g√•nger
                chrome.tabs.onUpdated.removeListener(listener);
            }
        });

        return; // Avsluta h√§r s√• att vi inte forts√§tter med injektionen
    }
});

/** 
 * Lyssnar p√• n√§r anv√§ndaren byter flik (navigerar till en ny URL) och skriver ut CTRL + TAB
 */
// Lyssnar p√• n√§r anv√§ndaren byter aktiv flik (byter mellan existerande flikar)
chrome.tabs.onActivated.addListener((activeInfo) => {

    // H√§mta information om den aktiva fliken
    chrome.tabs.get(activeInfo.tabId, (tab) => {
        if (chrome.runtime.lastError) {
            console.warn("‚ö†Ô∏è Kunde inte h√§mta flikinformation.");
            return;
        }

        console.log("CTRL + TAB");  
        // Skicka meddelande till den aktiva fliken (f√∂r flikbyte)
        if(!this.isCtrlWVisible){
            chrome.tabs.sendMessage(tab.id, {
            action: "show_message",
            text: "CTRL + TAB"
        }, () => {
            if (chrome.runtime.lastError) {
                // console.warn("‚ö†Ô∏è Inga mottagare f√∂r meddelandet. Content-script kanske inte √§r laddat?");
            }
        });
        }
        this.isCtrlWVisible = false;
        


    });
});

/**
 * Kod f√∂r lyssna efter om anv√§ndaren laddar om sidan CTRL R
 * Lyssnar efter om det uppdateras, n√§r statusen √§r complete och om det √§r samma tab url s√• skrivs ctrl r ut. 
 * Om url inte √§r samma skrivs alt + ‚Üê / alt + ‚Üí ut men kan √§ven triggas n√§r man byter flik
 */
// Spara tidigare URL f√∂r varje flik
let previousUrls = {};

// Lyssna p√• n√§r en flik laddas om
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
    if (changeInfo.status === "complete") {

        // Kolla om URL:en √§r densamma som innan
        if (previousUrls[tabId] === tab.url) {
            console.log("üîÑ Sidan laddades om. Skickar meddelande...");
            // Skicka meddelandet till content-script
            console.log(this.flagForWebbsiteForCTRLR)
            if(!this.flagForWebbsiteForCTRLR){
                 chrome.tabs.sendMessage(tabId, {
                action: "show_message",
                text: "CTRL + R"
            }, () => {
                if (chrome.runtime.lastError) {
                    // console.warn("‚ö†Ô∏è Kunde inte skicka meddelande. Content-script kanske inte √§r laddat?");
                }
            });
            }
            this.flagForWebbsiteForCTRLR = false;
                 
        }

        else {

            setTimeout(() => {
                if(!this.isCtrlTVisible && !this.flagForWebbsiteForAlt){
                chrome.tabs.sendMessage(tabId, {
                action: "show_message",
                text: "ALT + ‚Üê / ALT + ‚Üí"
            }, () => {
                if (chrome.runtime.lastError) {
                    // console.warn("‚ö†Ô∏è Kunde inte skicka meddelande. Content-script kanske inte √§r laddat?");
                }
            });
                }
                this.isCtrlTVisible = false;
                this.flagForWebbsiteForAlt = false;
            }, 1);

                
               
            
        }

        // Uppdatera den sparade URL:en f√∂r denna flik
        previousUrls[tabId] = tab.url;
    }
});

// Lyssna p√• n√§r anv√§ndaren byter flik och uppdatera URL:en
chrome.tabs.onActivated.addListener((activeInfo) => {
    chrome.tabs.get(activeInfo.tabId, (tab) => {
        if (tab.url) {
            previousUrls[activeInfo.tabId] = tab.url;
        }
    });
});


// Spara den aktuella aktiva fliken
let activeTabId = null;

// Uppdatera aktiv flik n√§r anv√§ndaren byter flik
chrome.tabs.onActivated.addListener((activeInfo) => {
    activeTabId = activeInfo.tabId;
});

/** 
 * Lyssnar p√• n√§r en flik st√§ngs och skriver ut CTRL + W  
 * Finns event som lysnar p√• ifall tabs √§r borttagna, kontrollerar ifall det √§r tabben man √§r p√•  
 */
chrome.tabs.onRemoved.addListener((tabId, removeInfo) => {

    // Om den st√§ngda fliken var den aktiva, visa "CTRL + W"
    if (tabId === activeTabId) {

        // Hitta en annan √∂ppen flik att skicka meddelandet till
        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
            if (tabs.length > 0) {
                console.log("CTRL + W");
                this.isCtrlWVisible = true;
                chrome.tabs.sendMessage(tabs[0].id, {
                    action: "show_message",
                    text: "CTRL + W"
                }, () => {
                    if (chrome.runtime.lastError) {
                        // console.warn("‚ö†Ô∏è Kunde inte skicka meddelande. Content-script kanske inte √§r laddat?");
                    }
                });
            }
        });
    }
});


/**
 * Lyssna efter att anv√§ndaren bokm√§rker en sida 
 */
chrome.bookmarks.onCreated.addListener((id, bookmark) => {
    chrome.tabs.sendMessage(activeTabId, {
        action: "show_message",
        text: "CTRL + D"
    }, () => {
        if (chrome.runtime.lastError) {
            // console.warn("‚ö†Ô∏è Kunde inte skicka meddelande. Content-script kanske inte √§r laddat?");
        }
    });
});
  

/**
 * Hanterar n√§r anv√§ndaren laddar ner n√•got och skriver ut CTRL + S
 */
chrome.downloads.onCreated.addListener((downloadItem) => {
    chrome.tabs.sendMessage(activeTabId, {
        action: "show_message",
        text: "CTRL + S"
    }, () => {
        if (chrome.runtime.lastError) {
            // console.warn("‚ö†Ô∏è Kunde inte skicka meddelande. Content-script kanske inte √§r laddat?");
        }
    });

  });
  chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
    if (changeInfo.url) {
        const url = new URL(changeInfo.url);

        // Kontrollera om det √§r en s√∂kning eller en direkt navigering
        if ((url.hostname.includes("google.com") && url.pathname.includes("/search")) ||
            (url.hostname.includes("bing.com") && url.pathname.includes("/search")) ||
            (url.hostname.includes("duckduckgo.com") && url.pathname.includes("/")) ||
            (url.hostname.includes("yahoo.com") && url.pathname.includes("/search"))) {
            
            // Det √§r en s√∂kning
            console.log("üîç Anv√§ndaren gjorde en s√∂kning:", url.searchParams.get("q"));
        } else {
            // Det √§r en direkt navigering till en webbplats
            console.log("üåç Anv√§ndaren navigerade till en webbsida:", url.href);
            this.flagForWebbsiteForCTRLR = true;
            this.flagForWebbsiteForAlt = true;
        }
    }
});


// Lyssnar p√• meddelanden fr√•n shortcommand_div.js och sparar kortkommandon
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === "save_shortcut") {
        saveShortcutToStorage(message.shortcut);
        sendResponse({ status: "Shortcut saved!" });
    }
});

// Funktion f√∂r att spara kortkommandon som en r√§knare
function saveShortcutToStorage(shortcut) {
    chrome.storage.local.get(["shortcuts"], function (result) {
        let shortcuts = result.shortcuts || {}; // H√§mta befintliga kortkommandon (som objekt)

        // Om kortkommandot redan finns, √∂ka r√§knaren, annars s√§tt den till 1
        shortcuts[shortcut] = (shortcuts[shortcut] || 0) + 1;

        // Spara tillbaka uppdaterad data i Chrome Storage
        chrome.storage.local.set({ shortcuts: shortcuts }, function () {
            console.log(`‚úÖ Kortkommando '${shortcut}' har nu anv√§nts ${shortcuts[shortcut]} g√•nger.`);
        });
    });
}












  
/** 
 * Om CTRL W skrivs ut ska inte ctrl tab skrivas ut -- FIXAD
 * Om CTRL T skrivs ut ska inte alt ‚Üê / alt ‚Üí skrivas ut --FIXAD 
 * ifall muskordinater inte √§r undefined ska inte alt ‚Üê / alt ‚Üí skrivas ut
 * CTRL R skrivs ut om man g√•r direkt till en sida --FIXAD
 * alt skrivs ut om man g√•r direkt till en sida --FIXAD
 * CTRL R skrivs ut 4 g√•nger typ
 * Hur ska man hantera ifall anv√§ndaren g√•r till newtab
 */
  





